// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/iooojik/go-auth-gate/internal/model"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

type SessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionService) EXPECT() *SessionService_Expecter {
	return &SessionService_Expecter{mock: &_m.Mock}
}

// AppleLogin provides a mock function with given fields: ctx, callbackInfo
func (_m *SessionService) AppleLogin(ctx context.Context, callbackInfo model.Generate) error {
	ret := _m.Called(ctx, callbackInfo)

	if len(ret) == 0 {
		panic("no return value specified for AppleLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Generate) error); ok {
		r0 = rf(ctx, callbackInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionService_AppleLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppleLogin'
type SessionService_AppleLogin_Call struct {
	*mock.Call
}

// AppleLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - callbackInfo model.Generate
func (_e *SessionService_Expecter) AppleLogin(ctx interface{}, callbackInfo interface{}) *SessionService_AppleLogin_Call {
	return &SessionService_AppleLogin_Call{Call: _e.mock.On("AppleLogin", ctx, callbackInfo)}
}

func (_c *SessionService_AppleLogin_Call) Run(run func(ctx context.Context, callbackInfo model.Generate)) *SessionService_AppleLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Generate))
	})
	return _c
}

func (_c *SessionService_AppleLogin_Call) Return(_a0 error) *SessionService_AppleLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_AppleLogin_Call) RunAndReturn(run func(context.Context, model.Generate) error) *SessionService_AppleLogin_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUser provides a mock function with given fields: ctx, userID
func (_m *SessionService) CheckUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CheckUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionService_CheckUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUser'
type SessionService_CheckUser_Call struct {
	*mock.Call
}

// CheckUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *SessionService_Expecter) CheckUser(ctx interface{}, userID interface{}) *SessionService_CheckUser_Call {
	return &SessionService_CheckUser_Call{Call: _e.mock.On("CheckUser", ctx, userID)}
}

func (_c *SessionService_CheckUser_Call) Run(run func(ctx context.Context, userID string)) *SessionService_CheckUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionService_CheckUser_Call) Return(_a0 error) *SessionService_CheckUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_CheckUser_Call) RunAndReturn(run func(context.Context, string) error) *SessionService_CheckUser_Call {
	_c.Call.Return(run)
	return _c
}

// GoogleLogin provides a mock function with given fields: ctx, token
func (_m *SessionService) GoogleLogin(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GoogleLogin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_GoogleLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GoogleLogin'
type SessionService_GoogleLogin_Call struct {
	*mock.Call
}

// GoogleLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *SessionService_Expecter) GoogleLogin(ctx interface{}, token interface{}) *SessionService_GoogleLogin_Call {
	return &SessionService_GoogleLogin_Call{Call: _e.mock.On("GoogleLogin", ctx, token)}
}

func (_c *SessionService_GoogleLogin_Call) Run(run func(ctx context.Context, token string)) *SessionService_GoogleLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionService_GoogleLogin_Call) Return(_a0 string, _a1 error) *SessionService_GoogleLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_GoogleLogin_Call) RunAndReturn(run func(context.Context, string) (string, error)) *SessionService_GoogleLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
